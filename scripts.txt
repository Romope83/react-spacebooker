-- Tabela para armazenar os espaços (salas, escritórios, etc.)
CREATE TABLE public.spaces (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  name TEXT NOT NULL,
  capacity INT NOT NULL,
  resources TEXT
);

-- Tabela para armazenar as reservas feitas pelos usuários
CREATE TABLE public.reservations (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  space_id BIGINT REFERENCES public.spaces(id) ON DELETE CASCADE,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  user_email TEXT,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time TIME NOT NULL,
  space_name TEXT
);


AQUI É O SEGUNDO QUERY 

-- 1. Ativar a Row Level Security (RLS) para ambas as tabelas
ALTER TABLE public.spaces ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reservations ENABLE ROW LEVEL SECURITY;

-- 2. Políticas para a tabela 'spaces'
-- Permite que qualquer usuário autenticado leia todos os espaços
CREATE POLICY "Allow authenticated users to read all spaces"
ON public.spaces FOR SELECT
TO authenticated
USING (true);

-- Permite que apenas administradores criem, atualizem ou apaguem espaços
CREATE POLICY "Allow admins full access to spaces"
ON public.spaces FOR ALL
TO authenticated
USING ((auth.jwt() -> 'user_metadata') ->> 'role' = 'admin')
WITH CHECK ((auth.jwt() -> 'user_metadata') ->> 'role' = 'admin');

-- 3. Políticas para a tabela 'reservations'
-- Permite que um usuário crie uma reserva para si mesmo
CREATE POLICY "Allow users to create their own reservations"
ON public.reservations FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

-- Permite que um usuário leia apenas as suas próprias reservas
CREATE POLICY "Allow users to read their own reservations"
ON public.reservations FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

-- Permite que um usuário atualize apenas as suas próprias reservas
CREATE POLICY "Allow users to update their own reservations"
ON public.reservations FOR UPDATE
TO authenticated
USING (auth.uid() = user_id);

-- Permite que um usuário apague apenas as suas próprias reservas
CREATE POLICY "Allow users to delete their own reservations"
ON public.reservations FOR DELETE
TO authenticated
USING (auth.uid() = user_id);

-- Permite que administradores tenham acesso total a todas as reservas
CREATE POLICY "Allow admins full access to reservations"
ON public.reservations FOR ALL
TO authenticated
USING ((auth.jwt() -> 'user_metadata') ->> 'role' = 'admin')
WITH CHECK ((auth.jwt() -> 'user_metadata') ->> 'role' = 'admin');
